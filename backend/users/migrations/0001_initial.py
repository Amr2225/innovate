# Generated by Django 4.2.16 on 2025-06-05 16:17

from django.conf import settings
from django.db import migrations, models
import nanoid_field.fields
import users.models
import users.validation
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(
                    max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(
                    blank=True, null=True, verbose_name='last login')),
                ('id', models.UUIDField(default=uuid.uuid4,
                 editable=False, primary_key=True, serialize=False)),
                ('email', models.EmailField(blank=True,
                 max_length=254, null=True, unique=True)),
                ('otp', models.CharField(blank=True, max_length=6, null=True)),
                ('otp_created_at', models.DateTimeField(blank=True, null=True)),
                ('otp_expiry_time_minutes',
                 models.PositiveSmallIntegerField(default=5)),
                ('date_joined', models.DateTimeField(auto_now_add=True)),
                ('role', models.CharField(choices=[('Institution', 'Institution'), ('Student', 'Student'), (
                    'Teacher', 'Teacher'), ('Admin', 'Admin')], default='Student', max_length=15)),
                ('is_email_verified', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('is_superuser', models.BooleanField(default=False)),
                ('is_staff', models.BooleanField(default=False)),
                ('first_name', models.CharField(
                    blank=True, max_length=255, null=True)),
                ('middle_name', models.CharField(
                    blank=True, max_length=255, null=True)),
                ('last_name', models.CharField(
                    blank=True, max_length=255, null=True)),
                ('avatar', models.ImageField(blank=True,
                 null=True, upload_to='user/avatars')),
                ('birth_date', models.DateTimeField(blank=True, null=True)),
                ('age', models.PositiveIntegerField(blank=True, null=True)),
                ('national_id', models.CharField(blank=True, max_length=14, null=True,
                 unique=True, validators=[users.validation.nationalId_length_validation])),
                ('semester', models.PositiveSmallIntegerField(default=1)),
                ('institution_type', models.CharField(blank=True, choices=[('school', 'School'), (
                    'faculty', 'Faculty')], help_text='This field is required', max_length=10, null=True)),
                ('access_code', nanoid_field.fields.NanoidField(
                    alphabet='0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz-', blank=True, max_length=8, null=True, unique=True)),
                ('name', models.CharField(blank=True,
                 max_length=255, null=True, unique=True)),
                ('credits', models.PositiveIntegerField(blank=True, null=True)),
                ('logo', models.ImageField(blank=True,
                 null=True, upload_to='institution/logo/')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.',
                 related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('institution', models.ManyToManyField(blank=True, limit_choices_to={
                 'role': 'Institution'}, related_name='members', to=settings.AUTH_USER_MODEL)),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.',
                 related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
            managers=[
                ('objects', users.models.CustomManager()),
            ],
        ),
    ]
